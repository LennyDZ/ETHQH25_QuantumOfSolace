# -*- coding: utf-8 -*-
"""Wigner_Projection_Tomography.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1klYcn0S0UD-kpwpFE4_IAFeSErwqv2Dy
"""
import numpy as np
from qutip import *
import os

# Integration function
def intergrat(W1, W2, dx,dy):
    return 2 * np.pi *np.sum(W1 * W2) * dx*dy

def precomp(N, xvec, yvec):
    print(f"    Start precomputation for {len(xvec)}")
    l = []
    for m in range(N):
        for n in range(m, N):
            if m == n:
                # Diagonal projector: |m><m|
                G = basis(N, m) * basis(N, m).dag()
                W = wigner(G, xvec, yvec)
                l.append((W,W))
            else:
                # Symmetric (real part)
                G_plus = (basis(N, m) * basis(N, n).dag() + basis(N, n) * basis(N, m).dag()).unit()
                W_plus = wigner(G_plus, xvec, yvec)

                # Anti-symmetric (imag part)
                G_minus = (basis(N, m) * basis(N, n).dag() - basis(N, n) * basis(N, m).dag()) * (1j)
                G_minus = G_minus.unit()
                W_minus = wigner(G_minus, xvec, yvec)
                l.append((W_plus,W_minus))
    return l

def sven_reconstruct(xvec,yvec, W_stat, N):
    x_lim = int(np.max(xvec))
    y_lim = int(np.max(yvec))
    N_x = len(xvec)
    N_y = len(yvec)
    fname= f"svendata__N{N}_x{x_lim}_{N_x}_y{y_lim}_{N_y}.npy"
    if os.path.exists(fname):
        print("     data already computed")
        l = np.load(fname)
    
    if l.size == 0:
        l = precomp(N, xvec, yvec)

    dx,dy = xvec[1] - xvec[0],  yvec[1] - yvec[0]
    reconstruction = np.zeros((N, N), dtype=complex)
    j=0
    for m in range(N):
          for n in range(m, N):

              if m == n:
                  W, _ = l[j]
                  # Diagonal projector: |m><m|
                  v = intergrat(W, W_stat, dx,dy)
                  reconstruction[m, m] = v.real
              else:
                  W_plus, W_minus = l[j]
                  # Symmetric (real part)
                  r = intergrat(W_plus, W_stat, dx,dy)

                  # Anti-symmetric (imag part)
                  i = intergrat(W_minus, W_stat, dx,dy)

                  reconstruction[m, n] = (r - 1j * i)
                  reconstruction[n, m] = (r + 1j * i)
              j += 1
    return reconstruction.T
